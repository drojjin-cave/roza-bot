import asyncio

from aiogram import Bot, Router, F, html
from aiogram.types import Message
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto
from moduls.other.static import main_text, main_photo_path, notes, notes_auto, token_sheet
import logging
from moduls.keyboards.main_keyboard import back_keyboard, user_main_keyboard
from moduls.keyboards.time_key import start_keyboard, finish_keyboard, confirm_keyboard, confirm_KB_keyboard
from moduls.utils.states_form import StepsTimeAuto
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta, timezone
from moduls.utils.google_sheet.GoogleSheet import GoogleSheet
from moduls.handlers.basic import mes_start

add_time_auto_handlers = Router(name=__name__)

id_table = '1zYjSJhbwD_lwWMIYx4h7uJC6YIuWkzlmDzDhWBP1dX4'  # –í–µ—Å–µ–Ω–Ω–∏–µ —Å—Ç–∞—Ä—Ç—ã 2025
google_sheet = GoogleSheet(token_sheet, id_table)

steps_time = ['–§–ò–ù–ò–®', '–ö–í']
data_user_confirm = ''

@add_time_auto_handlers.callback_query(F.data == '–∞–≤—Ç–æ–º–∞—Ç')
async def select_auto_time(call: CallbackQuery, state: FSMContext):

    await call.message.edit_media(InputMediaPhoto(media=FSInputFile(path=main_photo_path), caption=notes_auto))
    await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞:</b>')

    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} {call.from_user.id} –≤—ã–±—Ä–∞–ª —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞/—Ñ–∏–Ω–∏—à–∞')
    await call.answer()
    await state.set_state(StepsTimeAuto.GET_ID)


@add_time_auto_handlers.message(StepsTimeAuto.GET_ID)
async def get_id(message: Message, state: FSMContext):
    data = google_sheet.read_data('–î–∞–Ω–Ω—ã–µ')
    id_players = google_sheet.read_data('–£—á–∞—Å—Ç–Ω–∏–∫–∏!C2:C')

    if not message.text.isdigit():

        text = (f'<b>–í–≤–µ–¥–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n'
                f'–ù–æ—Ä–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n\n'
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ:</b>')

        await message.answer(text)

        await state.set_state(StepsTimeAuto.GET_ID)
    elif google_sheet.search_user_from_id(message.text, data):
        text = (f'<b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n'
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ:</b>')

        await message.answer(text)
        await state.set_state(StepsTimeAuto.GET_ID)
    elif message.text not in id_players:
        text = (f'<b>–¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n'
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ:</b>')

        await message.answer(text)
        await state.set_state(StepsTimeAuto.GET_ID)

    else:
        await state.update_data(id=message.text)

        await message.answer(f'<blockquote>–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{message.text}</b>\n'
                             f'–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–°–¢–ê–†–¢</b></blockquote>', reply_markup=start_keyboard())
        await state.set_state(StepsTimeAuto.GET_START)

@add_time_auto_handlers.callback_query(StepsTimeAuto.GET_START)
async def get_start(call: CallbackQuery, state: FSMContext):
    start = datetime.now(timezone.utc)
    await state.update_data(start=start)

    context_data = await state.get_data()
    id = context_data.get('id')
    time_to_message_start = (start + timedelta(hours=7, minutes=0)).strftime('%H:%M:%S')
    global mes_start_time
    mes_start_time = (f'<b>‚è±Ô∏è –ó–∞—Å–µ–∫–∞–µ—Ç—Å—è –≤—Ä–µ–º—è!</b>'
                     f'<blockquote>–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{id}</b>\n'
                     f'–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ - <b>{time_to_message_start}</b>\n'
                     f'–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–§–ò–ù–ò–®</b></blockquote>')

    await call.message.edit_text(mes_start_time, reply_markup=finish_keyboard())
    await state.set_state(StepsTimeAuto.GET_FINISH)
    await call.answer()

@add_time_auto_handlers.callback_query(StepsTimeAuto.GET_FINISH)
async def get_finish(call: CallbackQuery, state: FSMContext, bot: Bot):
    global data_user_confirm
    if call.data == '—Ñ–∏–Ω–∏—à':
        finish = datetime.now(timezone.utc)
        await state.update_data(finish=finish)

        context_data = await state.get_data()
        start = context_data.get('start')
        id = context_data.get('id')

        total_time = str((finish-start)).replace('.', ':')[2:10]

        start = (start + timedelta(hours=7, minutes=0)).strftime('%H:%M:%S')
        finish = (finish + timedelta(hours=7, minutes=0)).strftime('%H:%M:%S')

        data_user_confirm = (f'<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ!</b>\n'
                     f'<blockquote>ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{id}</b>\n'
                     f'–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ - <b>{start}</b>\n'
                     f'–í—Ä–µ–º—è —Ñ–∏–Ω–∏—à–∞ - <b>{finish}</b>\n'
                     f'–í—Ä–µ–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{total_time}</b></blockquote>\n')
        await call.message.edit_text(text=data_user_confirm, reply_markup=confirm_keyboard())
        await state.set_state(StepsTimeAuto.CONFIRM)

@add_time_auto_handlers.callback_query(StepsTimeAuto.CONFIRM)
async def confirm_menu(call: CallbackQuery, state: FSMContext):
    context_data = await state.get_data()
    start = context_data.get('start')
    finish = context_data.get('finish')
    id = context_data.get('id')

    total_time = str((finish - start)).replace('.', ':')[2:10]
    start = (start + timedelta(hours=7, minutes=0)).strftime('%H:%M:%S')
    finish = (finish + timedelta(hours=7, minutes=0)).strftime('%H:%M:%S')

    time_input = (datetime.now(timezone.utc) + timedelta(hours=7, minutes=0)).strftime('%d.%m.%y %H:%M:%S')
    refery_id = call.from_user.id
    data = [[time_input, id, total_time, refery_id]]

    if call.data == '–ö–í':
        await call.message.edit_text(data_user_confirm + '\n<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ö–í!\n'
                                                      'üëá –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è</b>', reply_markup=confirm_KB_keyboard())
        await state.set_state(StepsTimeAuto.CONFIRM_KB)

    elif call.data == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å_—Ñ–∏–Ω–∏—à':
        data_from_sheet = google_sheet.read_data('–î–∞–Ω–Ω—ã–µ')

        if google_sheet.search_user_from_id(id, data_from_sheet):
            await call.message.edit_reply_markup()
            await call.message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ üòî')
        else:
            google_sheet.write_data('–î–∞–Ω–Ω—ã–µ', data)
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} {call.from_user.id} '
                         f'–∑–∞–Ω–µ—Å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à {data}')

            data_user = (f'<b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω—ã!</b>\n'
                         f'<blockquote>ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{id}</b>\n'
                         f'–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ - <b>{start}</b>\n'
                         f'–í—Ä–µ–º—è —Ñ–∏–Ω–∏—à–∞ - <b>{finish}</b>\n'
                         f'–í—Ä–µ–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{total_time}</b></blockquote>\n\n'
                         f'–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—è–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...')
            await call.message.edit_text(text=data_user)

            await asyncio.sleep(5)
            mes_start[0] = await call.message.answer_photo(photo=FSInputFile(path=main_photo_path), caption=main_text,
                                                           reply_markup=user_main_keyboard())

            await state.clear()
            await call.answer()

    elif call.data == '–¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã':
        await call.message.edit_reply_markup(None)
        await call.message.answer('<b>–í—ã –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É!\n–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n–í–Ω–µ—Å–∏—Ç–µ –≤—Ä–µ–º—è —Å —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é!</b>')
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} {call.from_user.id} '
                     f'—É–∫–∞–∑–∞–ª, —á—Ç–æ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä–æ–º –∏ –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö! {data}')

        await asyncio.sleep(5)
        mes_start[0] = await call.message.answer_photo(photo=FSInputFile(path=main_photo_path), caption=main_text,
                                                       reply_markup=user_main_keyboard())

        await state.clear()
        await call.answer()


@add_time_auto_handlers.callback_query(StepsTimeAuto.CONFIRM_KB)
async def confirm(call: CallbackQuery, state: FSMContext, bot: Bot):
    if call.data == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å_–∫–≤':
        context_data = await state.get_data()

        id = context_data.get('id')
        total_time = '–ø—Ä–µ–≤—ã—à–µ–Ω–æ –ö–í'

        data_from_sheet = google_sheet.read_data('–î–∞–Ω–Ω—ã–µ')
        time_input = (datetime.now(timezone.utc) + timedelta(hours=7, minutes=0)).strftime('%d.%m.%y %H:%M:%S')
        refery_id = call.from_user.id

        data = [[time_input, id, total_time, refery_id]]

        if google_sheet.search_user_from_id(id, data_from_sheet):
            await call.message.edit_reply_markup()
            await call.message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ üòî')
            await asyncio.sleep(3)
            await call.answer()

            mes_start[0] = await call.message.answer_photo(photo=FSInputFile(path=main_photo_path), caption=main_text,
                                                           reply_markup=user_main_keyboard())

        else:
            google_sheet.write_data('–î–∞–Ω–Ω—ã–µ', data)
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} {call.from_user.id} '
                         f'–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ö–í –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à, –∑–∞–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {data}')

            data_user = (f'<b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω—ã!</b>\n'
                         f'<blockquote>–£—á–∞—Å—Ç–Ω–∏–∫ —Å –Ω–æ–º–µ—Ä–æ–º <b>{id}</b>\n'
                         f'–ø—Ä–µ–≤—ã—Å–∏–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!</blockquote>\n\n'
                         f'–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—è–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...')
            await call.message.edit_text(text=data_user, reply_markup=None)
            await asyncio.sleep(4)
            await call.answer()

            mes_start[0] = await call.message.answer_photo(photo=FSInputFile(path=main_photo_path), caption=main_text,
                                                           reply_markup=user_main_keyboard())

            await state.clear()

    elif call.data == '–æ—Ç–º–µ–Ω–∏—Ç—å_–∫–≤':

        await call.message.edit_text(data_user_confirm, reply_markup=confirm_keyboard())

        await state.set_state(StepsTimeAuto.CONFIRM)

        await call.answer()


