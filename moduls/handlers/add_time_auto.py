import asyncio

from aiogram import Bot, Router, F, html
from aiogram.types import Message
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto
from moduls.other.static import main_text, main_photo_path, notes, notes_auto, token_sheet
import logging
from moduls.keyboards.main_keyboard import back_keyboard, user_main_keyboard
from moduls.keyboards.time_key import start_keyboard, finish_keyboard
from moduls.utils.states_form import StepsTimeAuto
from aiogram.fsm.context import FSMContext
from datetime import datetime
from moduls.utils.google_sheet.GoogleSheet import GoogleSheet

add_time_auto_handlers = Router(name=__name__)


google_sheet = GoogleSheet(token_sheet)

@add_time_auto_handlers.callback_query(F.data == '–∞–≤—Ç–æ–º–∞—Ç')
async def select_auto_time(call: CallbackQuery, state: FSMContext):

    await call.message.edit_media(InputMediaPhoto(media=FSInputFile(path=main_photo_path), caption=notes_auto))
    await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞:</b>')

    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} {call.from_user.id} –≤—ã–±—Ä–∞–ª —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞/—Ñ–∏–Ω–∏—à–∞')
    await call.answer()
    await state.set_state(StepsTimeAuto.GET_ID)


@add_time_auto_handlers.message(StepsTimeAuto.GET_ID)
async def get_id(message: Message, state: FSMContext):
    data = google_sheet.read_data('–î–∞–Ω–Ω—ã–µ')

    if not message.text.isdigit():

        text = (f'<b>–í–≤–µ–¥–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n'
                f'–ù–æ—Ä–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n\n'
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ:</b>')

        await message.answer(text)

        await state.set_state(StepsTimeAuto.GET_ID)
    elif google_sheet.search_user_from_id(message.text, data):
        text = (f'<b>–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ –µ—Å—Ç—å!\n\n'
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ:</b>')

        await message.answer(text)
        await state.set_state(StepsTimeAuto.GET_ID)


    else:
        await state.update_data(id=message.text)

        await message.answer(f'<blockquote>–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{message.text}</b>\n'
                             f'–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–°–¢–ê–†–¢</b></blockquote>', reply_markup=start_keyboard())
        await state.set_state(StepsTimeAuto.GET_START)

@add_time_auto_handlers.callback_query(StepsTimeAuto.GET_START)
async def get_start(call: CallbackQuery, state: FSMContext):
    start = datetime.now()
    await state.update_data(start=start)

    context_data = await state.get_data()
    id = context_data.get('id')

    await call.message.edit_text(f'<b>‚è±Ô∏è –ó–∞—Å–µ–∫–∞–µ—Ç—Å—è –≤—Ä–µ–º—è!</b>'
                                 f'<blockquote>–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{id}</b>\n'
                                 f'–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ - <b>{start.strftime("%H:%M:%S")}</b>\n'
                                 f'–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–§–ò–ù–ò–®</b></blockquote>', reply_markup=finish_keyboard())
    await state.set_state(StepsTimeAuto.GET_FINISH)
    await call.answer()

@add_time_auto_handlers.callback_query(StepsTimeAuto.GET_FINISH)
async def get_finish(call: CallbackQuery, state: FSMContext):
    context_data = await state.get_data()
    start = context_data.get('start')
    id = context_data.get('id')

    finish = datetime.now()
    total_time = str((finish-start)).replace('.', ':')[2:10]

    data_from_sheet = google_sheet.read_data('–î–∞–Ω–Ω—ã–µ')
    time_input = datetime.now().strftime('%H:%M:%S')
    data = [[time_input, id, '', '', total_time]]

    if google_sheet.search_user_from_id(id, data_from_sheet):
        await call.message.edit_reply_markup()
        await call.message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ üòî')
        await asyncio.sleep(3)
    else:
        google_sheet.write_data('–î–∞–Ω–Ω—ã–µ', data)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} {call.from_user.id} '
                     f'–∑–∞–Ω–µ—Å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à {data}')

        data_user = (f'<b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω—ã!</b>\n'
                     f'<blockquote>ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{id}</b>\n'
                     f'–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ - <b>{start.strftime("%H:%M:%S")}</b>\n'
                     f'–í—Ä–µ–º—è —Ñ–∏–Ω–∏—à–∞ - <b>{finish.strftime("%H:%M:%S")}</b>\n'
                     f'–í—Ä–µ–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ - <b>{total_time}</b></blockquote>\n')
        await call.message.edit_text(text=data_user)
        await asyncio.sleep(2)
        await call.answer()
    await call.message.answer_photo(photo=FSInputFile(path=main_photo_path), caption=main_text, reply_markup=user_main_keyboard())

    await state.clear()


