import asyncio
from datetime import datetime, timezone, timedelta

from aiogram import Router, html, F, Bot
from aiogram.types import Message, FSInputFile, InputMediaPhoto, CallbackQuery
from aiogram.filters import CommandStart, Command
import logging
from moduls.other.static import main_text, main_photo_path, help_text
from moduls.keyboards.main_keyboard import *
from aiogram.fsm.context import FSMContext

from moduls.settings import settings
from moduls.utils.comands import set_commands
from moduls.utils.google_sheet.GoogleSheet import GoogleSheet
from moduls.other.static import token_sheet
from moduls.utils.states_form import Help

id_table = '1LjYgO3xAXoi1kC828beed1hBMTuDmOCt4iQvAUBqC84'  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
google_sheet_base = GoogleSheet(token_sheet, id_table)

basic_handlers = Router(name=__name__)

mes_start = [None]
ADMIN_CHANNEL = settings.bots.admin_channel

@basic_handlers.message(CommandStart())
async def command_start_handler(message: Message, bot: Bot, state: FSMContext):
    await set_commands(bot, message.from_user.id)
    await state.clear()
    try:
        await bot.edit_message_reply_markup(message_id=mes_start[0].message_id, reply_markup=None, chat_id=message.chat.id)
    except:
        pass

    mes1 = await bot.send_photo(message.from_user.id, photo=FSInputFile(path=main_photo_path), caption=main_text, reply_markup=user_main_keyboard())
    mes_start[0] = mes1

    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç')

    id_users = google_sheet_base.read_data('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A2:A')
    if str(message.from_user.id) not in id_users:

        data = [[message.from_user.id,
                 message.from_user.last_name,
                 message.from_user.first_name,
                 message.from_user.username,
                 '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']]


        google_sheet_base.write_data('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A2:E', data)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} {message.from_user.id} –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')



@basic_handlers.message(Command("help"))
async def get_help(message: Message, bot: Bot, state: FSMContext):
    current_state = await state.get_state()

    if current_state is None:
        try:
            await message.delete()
            await bot.edit_message_reply_markup(message_id=mes_start[0].message_id, reply_markup=None, chat_id=message.chat.id)
            await message.answer(help_text)

            #await bot.edit_message_caption(message_id=mes_start.message_id, reply_markup=None, chat_id=message.chat.id, caption=help_text)
            await state.set_state(Help.GET_HELP)
        except:
            await message.answer('–ë—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        await message.delete()
        mes_error_help = await message.answer('–†–∞–∑–¥–µ–ª <b>help</b> —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n–∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!')
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=mes_error_help.message_id)


        #await bot.edit_message_reply_markup(message_id=mes_start.message_id, reply_markup=None, chat_id=message.chat.id)



@basic_handlers.message(Help.GET_HELP)
async def help_answer(message: Message, state: FSMContext, bot: Bot):

    date_update_info = datetime.now(timezone.utc)
    date_update_info = (date_update_info + timedelta(hours=7, minutes=0)).strftime('%d.%m.%Y %H:%M:%S')

    text = (f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{message.from_user.username}</b>\n'
            f'–í—Ä–µ–º—è - <b>{date_update_info}</b>\n'
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - <b>{message.from_user.full_name}</b>\n\n'
            f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>'
            f'<blockquote>{message.text}</blockquote>'
            )

    await bot.send_message(ADMIN_CHANNEL, text=text)

    text_answer = ('\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n'
                    '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!üòè\n\n'
                   '–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—è–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...')
    await message.reply(text_answer)
    await state.clear()

    await asyncio.sleep(5)
    global mes_start
    mes_start[0] = await bot.send_photo(message.from_user.id, photo=FSInputFile(path=main_photo_path), caption=main_text,
                                     reply_markup=user_main_keyboard())










@basic_handlers.callback_query(F.data == '–Ω–∞–∑–∞–¥')
async def back(call: CallbackQuery, bot: Bot):
    await call.message.edit_media(InputMediaPhoto(media=FSInputFile(path=main_photo_path), caption=main_text),
                                  reply_markup=user_main_keyboard())

    await call.answer()

basic_handlers.message.filter(F.chat.type == "private")